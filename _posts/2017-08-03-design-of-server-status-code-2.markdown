---
layout:     post
title:      "服务器状态码设计（二）"
subtitle:   ""
# date:       2016-06-20 10:23:36
author:     "K.I.S.S."
#header-img: ""
catalog:    true
tags:
    - Server
    - Design
---

## 0 一篇一句

**三人行，必有我师焉。择其善者而从之，其不善者而改之。**

## 1 概述

#### 1.1 第一版『服务器与客户端的状态码』设计[【详见】](/2017/08/01/design-of-server-status-code-1/#myDesign){:target="blank"}    

> HTTP状态码统一为200。Result对象里面的code为0表示正常返回，非0表示异常返回。    
> 异常详情如下：
> - 4XXXX，表示客户端错误
> - 5XXXX，表示服务器（API）错误
> - 6XXXX，表示服务器（Dubbo）错误


#### 1.2 久增大神的建议

ErrorCode不应该用dubbo或者api来区分。

#### 1.3 我的理解

**问题1：ErrorCode包含了过多的信息，客户端不应该知道服务器的细节。**    
ErrorCode应该属于通信协议的一部分。    
服务器与客户端的通信协议应该只关注两端交互的内容，不该有多余的东西。

**问题2：协议界限不清楚**    
这个项目的组织，应该包含了两套协议。    
『API服务器与客户端的协议』和『API服务器与Dubbo服务器的协议』

## 2 改进

#### 2.1 第二版『服务器与客户端的状态码』设计

- HTTP状态码统一为200。Result对象里面的code为0表示正常返回，非0表示异常返回。（这个不变）
- 异常详情如下：
    + 4XXXX，表示客户端错误（参数问题等）
    + 5XXXX，表示服务器错误（服务器的bug导致的异常）
    + **6XXXX，表示业务逻辑上的异常逻辑的状态码（用于客户端执行异常逻辑流）**

> 注：五位的状态码分为三个部分。X-XX-XX表示：错误类别-项目或模块编号-具体错误编号

#### 2.2 第二版设计的说明

###### 2.2.1 未改变部分
1. 不复用HTTP状态码。原因不变，[详见](/2017/08/01/design-of-server-status-code-1/#noHttpStatusCode){:target="blank"}
2. 4XXXX表示客户端错误
3. 5XXXX表示由服务器bug引起的异常。注意，这里不应该透露给客户端报错的细节。

###### 2.2.2 改变的部分
主要是以『6』开头的状态码的含义的改变。    
根据『本文2.1节』中的描述，『6XXXX，表示业务逻辑上的异常逻辑的状态码』    
不管是code为0或者code为6XXXX，都表示 **服务器没有出现异常** ，正常返回了。

这可以理解为，需求分析的时候，会有一个『主要成功场景』和一些『备选事件流』。    
**主要成功场景** 的返回code为0，而 **备选事件流** 的返回code为6XXXX。

> 举个栗子：有一个叫做『练耳大师』的产品，音乐爱好者可以在里面做乐感训练。    
> 产品里面有一个功能叫做『练习分析』。产品规定某一种练习，需要练习超过30道题才能进行分析。    

> 所以，在用户没有做满30道题，并且点了『练习分析』按钮的时候。服务器逻辑是完全正确执行的，发现用户没有做满30道题，这个时候就返回6XXXX给客户端。    
> 客户端在获取到这个状态码就知道该执行『备选事件流』：提示用户『必须要做满30道题才能分析哦~』。


## 3 总结

- 协议应该只包含必要的交互信息，屏蔽底层细节。
- 项目中包含了两套协议：『客户端与API服务器的协议』和『API服务器和Dubbo服务器的协议』    
- 客户端与API服务器的协议，需要Result类中的所有信息。包括code, msg和data。    
- API服务器与Dubbo服务器的协议，也至少应该包含code和data两个部分。（因为，Dubbo服务器提供的接口，也包括『主要成功场景』和『备选事件流』）
- 协议的内部实现中不需要封装Result结构

## 4 感谢

再次感谢久增大神！感谢张胖子和各位关心我工作的好盆友们！
